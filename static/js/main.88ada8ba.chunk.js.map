{"version":3,"sources":["galeryimg.js","modal.js","nav.js","App.js","serviceWorker.js","index.js"],"names":["ImageApi","props","react_default","a","createElement","className","onClick","click","imageURL","src","alt","Modal","e","target","getAttribute","closemodal","imgModal","NavPinterest","placeholder","href","class","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","photos","modal","start","finish","openmodal","bind","assertThisInitialized","_this2","fetch","then","data","json","setState","objectSpread","results","_this3","window","onscroll","document","documentElement","scrollTop","innerHeight","offsetHeight","concat","i","_this4","seeFinalImage","map","src_galeryimg","urls","thumb","descriptionImg","alt_description","src_nav","src_modal","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88ada8ba.chunk.js","sourcesContent":["import React from 'react';\nimport './galeryimg.css';\n\n\nfunction ImageApi(props){\n    \n\n    return(\n        <div className=\"element\">\n            <img className=\"img\"  onClick={()=> props.click(props.imageURL)} src={props.imageURL} alt=\"imagen\"></img>\n            {/* <p>{props.descriptionImg}</p> */}\n        </div>\n    \n    )\n}\n\n    export default ImageApi;\n\n","import React from 'react';\nimport './modal.css'\n\nfunction Modal(props){\nreturn(\n    \n    <div className = \"containerModal\" onClick={(e)=> {\n        if (e.target.getAttribute(\"class\")===\"containerModal\"){\n            props.closemodal()\n        }\n    } } >\n        <div className= \"divBig\">\n            <div className=\"headModal\" >\n                <p className=\"pointsModal\">...</p>\n                <button className=\"btnHead submit\">Enviar</button>\n                <button className=\"btnHead save\" >Guardar</button>\n\n            </div>\n            <div className = \"imgModalWhatch\" >\n                <div className=\"divImage\">\n                <img className=\"imgModal\"  src={props.imgModal} alt=\"imagen\"></img>\n                </div>\n            <div className=\"divContent\">\n                <div className=\"divTextContent\">\n                    <p className=\"textModal\">Fotos y Comentarios</p>\n                </div>\n                <div className=\"divBtnContent\">\n                    <button className=\"btnContent\">1 foto</button>\n                    <button className=\"btnContent\" >Sin Comentarios</button>\n                </div>\n            </div>\n            </div>\n        </div>\n    </div>\n\n)\n\n\n}\n\nexport default Modal;","import React from 'react'\nimport './nav.css'\n\n\n\nfunction NavPinterest(){\n    return(\n    <div>\n    <nav className=\"elementNav\">\n\n        <ul className = \"btnnav\" >\n            <i className=\"fab fa-pinterest fa-2x logopinterest\"></i>\n            <input placeholder=\"Buscar\" className=\" search\" ></input>\n            <a className=\"iconNavInicio\" href=\"#\" alt=\"#\" >Inicio</a>\n            <a className=\"iconNav\" href=\"#\" alt=\"#\" >Siguiendo</a>\n            <a className=\"iconNav\" href=\"#\" alt=\"#\">Anita G</a>\n            <i class=\"fas fa-comment-dots fa-2x logoChat\"></i>\n            <i class=\"fas fa-bell fa-2x logoAlert\"></i>\n            <a className=\"iconNav points\" href=\"#\" alt=\"#\">...</a>\n\n        </ul>\n\n    </nav>\n    </div>\n    )\n}\n\nexport default NavPinterest;\n\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport ImageApi from './galeryimg.js'\nimport Modal from './modal.js'\nimport NavPinterest from './nav.js'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      photos:[],\n      modal: false,\n      start: false,\n      finish: false\n\n    }\nthis.openmodal=this.openmodal.bind(this)\nthis.closemodal=this.closemodal.bind(this)\n\n  }\n\n\n\n  componentDidMount(){\n   fetch('https://api.unsplash.com/search/photos?page=1&per_page=30&query=holiday&client_id=e4c19c3fe4d16da39cb7b49acaaeef72a5c5a4cc9d1ec18e16cba3b0a8554f3e')\n    .then(data=>data.json())\n    .then(json =>{\n      this.setState({\n        ...this.state,\n        photos: json.results\n      })\n    })\n  \n  }\n\n  componentWillUpdate (){\n    window.onscroll = () => {\n      if (document.documentElement.scrollTop + window.innerHeight >  document.documentElement.offsetHeight * 0.8){\n        this.setState({\n          ...this.state,\n          start:true,\n        })\n      }\n       if(this.state.finish !== this.state.start){\n        this.setState({\n          ...this.state,\n          finish:true,\n        })\n        fetch('https://api.unsplash.com/search/photos?page=3&per_page=20&query=job&client_id=e4c19c3fe4d16da39cb7b49acaaeef72a5c5a4cc9d1ec18e16cba3b0a8554f3e')\n        .then(data=>data.json())\n        .then(json =>{\n          this.setState({\n            ...this.state,\n            photos: this.state.photos.concat(json.results),\n            finish:true,\n            start:true,\n          })\n        })\n      }\n    }}\n  \n\n  \n  openmodal(i){\n    this.setState({\n      ...this.state,\n      modal:i\n    })\n  }\n\n  closemodal(){\n    this.setState({\n      ...this.state,\n      modal:false\n    })\n  }\n\n\n  render() {\n\n   \n\n    const watchimg = this.state.photos\n    const seeFinalImage = watchimg.map(i=><ImageApi click={this.openmodal} imageURL={i.urls.thumb} descriptionImg={i.alt_description} alt=\"imagen\" />)\n\n    return (\n      \n      <div className=\"containerNav\"><NavPinterest/>\n      \n      <div className= \"containerImage\" > \n        {this.state.modal && <Modal closemodal={this.closemodal} imgModal={this.state.modal}/>} \n        {seeFinalImage}\n      \n      </div>\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}